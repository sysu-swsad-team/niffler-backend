# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.tag import Tag  # noqa: F401,E501
from swagger_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, username: str=None, password: str=None, email: str=None, phone: str=None, balance: int=None, user_status: int=None, photo_urls: List[str]=None, tags: List[Tag]=None):  # noqa: E501
        """User - a model defined in Swagger

        :param username: The username of this User.  # noqa: E501
        :type username: str
        :param password: The password of this User.  # noqa: E501
        :type password: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param phone: The phone of this User.  # noqa: E501
        :type phone: str
        :param balance: The balance of this User.  # noqa: E501
        :type balance: int
        :param user_status: The user_status of this User.  # noqa: E501
        :type user_status: int
        :param photo_urls: The photo_urls of this User.  # noqa: E501
        :type photo_urls: List[str]
        :param tags: The tags of this User.  # noqa: E501
        :type tags: List[Tag]
        """
        self.swagger_types = {
            'username': str,
            'password': str,
            'email': str,
            'phone': str,
            'balance': int,
            'user_status': int,
            'photo_urls': List[str],
            'tags': List[Tag]
        }

        self.attribute_map = {
            'username': 'username',
            'password': 'password',
            'email': 'email',
            'phone': 'phone',
            'balance': 'balance',
            'user_status': 'userStatus',
            'photo_urls': 'photoUrls',
            'tags': 'tags'
        }

        self._username = username
        self._password = password
        self._email = email
        self._phone = phone
        self._balance = balance
        self._user_status = user_status
        self._photo_urls = photo_urls
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self) -> str:
        """Gets the username of this User.


        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this User.


        :param username: The username of this User.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self) -> str:
        """Gets the password of this User.


        :return: The password of this User.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this User.


        :param password: The password of this User.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def email(self) -> str:
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def phone(self) -> str:
        """Gets the phone of this User.


        :return: The phone of this User.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone: str):
        """Sets the phone of this User.


        :param phone: The phone of this User.
        :type phone: str
        """

        self._phone = phone

    @property
    def balance(self) -> int:
        """Gets the balance of this User.


        :return: The balance of this User.
        :rtype: int
        """
        return self._balance

    @balance.setter
    def balance(self, balance: int):
        """Sets the balance of this User.


        :param balance: The balance of this User.
        :type balance: int
        """

        self._balance = balance

    @property
    def user_status(self) -> int:
        """Gets the user_status of this User.

        User Status  # noqa: E501

        :return: The user_status of this User.
        :rtype: int
        """
        return self._user_status

    @user_status.setter
    def user_status(self, user_status: int):
        """Sets the user_status of this User.

        User Status  # noqa: E501

        :param user_status: The user_status of this User.
        :type user_status: int
        """

        self._user_status = user_status

    @property
    def photo_urls(self) -> List[str]:
        """Gets the photo_urls of this User.


        :return: The photo_urls of this User.
        :rtype: List[str]
        """
        return self._photo_urls

    @photo_urls.setter
    def photo_urls(self, photo_urls: List[str]):
        """Sets the photo_urls of this User.


        :param photo_urls: The photo_urls of this User.
        :type photo_urls: List[str]
        """

        self._photo_urls = photo_urls

    @property
    def tags(self) -> List[Tag]:
        """Gets the tags of this User.


        :return: The tags of this User.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[Tag]):
        """Sets the tags of this User.


        :param tags: The tags of this User.
        :type tags: List[Tag]
        """

        self._tags = tags
