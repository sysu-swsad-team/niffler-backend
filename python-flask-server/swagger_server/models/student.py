# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.user import User  # noqa: F401,E501
from swagger_server import util


class Student(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, studentid: int=None, name: str=None, age: int=None, gender: str=None, grade: str=None, major: str=None, account: User=None):  # noqa: E501
        """Student - a model defined in Swagger

        :param studentid: The studentid of this Student.  # noqa: E501
        :type studentid: int
        :param name: The name of this Student.  # noqa: E501
        :type name: str
        :param age: The age of this Student.  # noqa: E501
        :type age: int
        :param gender: The gender of this Student.  # noqa: E501
        :type gender: str
        :param grade: The grade of this Student.  # noqa: E501
        :type grade: str
        :param major: The major of this Student.  # noqa: E501
        :type major: str
        :param account: The account of this Student.  # noqa: E501
        :type account: User
        """
        self.swagger_types = {
            'studentid': int,
            'name': str,
            'age': int,
            'gender': str,
            'grade': str,
            'major': str,
            'account': User
        }

        self.attribute_map = {
            'studentid': 'studentid',
            'name': 'name',
            'age': 'age',
            'gender': 'gender',
            'grade': 'grade',
            'major': 'major',
            'account': 'account'
        }

        self._studentid = studentid
        self._name = name
        self._age = age
        self._gender = gender
        self._grade = grade
        self._major = major
        self._account = account

    @classmethod
    def from_dict(cls, dikt) -> 'Student':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Student of this Student.  # noqa: E501
        :rtype: Student
        """
        return util.deserialize_model(dikt, cls)

    @property
    def studentid(self) -> int:
        """Gets the studentid of this Student.


        :return: The studentid of this Student.
        :rtype: int
        """
        return self._studentid

    @studentid.setter
    def studentid(self, studentid: int):
        """Sets the studentid of this Student.


        :param studentid: The studentid of this Student.
        :type studentid: int
        """

        self._studentid = studentid

    @property
    def name(self) -> str:
        """Gets the name of this Student.


        :return: The name of this Student.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Student.


        :param name: The name of this Student.
        :type name: str
        """

        self._name = name

    @property
    def age(self) -> int:
        """Gets the age of this Student.


        :return: The age of this Student.
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age: int):
        """Sets the age of this Student.


        :param age: The age of this Student.
        :type age: int
        """

        self._age = age

    @property
    def gender(self) -> str:
        """Gets the gender of this Student.


        :return: The gender of this Student.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender: str):
        """Sets the gender of this Student.


        :param gender: The gender of this Student.
        :type gender: str
        """
        allowed_values = ["male", "female"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def grade(self) -> str:
        """Gets the grade of this Student.


        :return: The grade of this Student.
        :rtype: str
        """
        return self._grade

    @grade.setter
    def grade(self, grade: str):
        """Sets the grade of this Student.


        :param grade: The grade of this Student.
        :type grade: str
        """

        self._grade = grade

    @property
    def major(self) -> str:
        """Gets the major of this Student.


        :return: The major of this Student.
        :rtype: str
        """
        return self._major

    @major.setter
    def major(self, major: str):
        """Sets the major of this Student.


        :param major: The major of this Student.
        :type major: str
        """

        self._major = major

    @property
    def account(self) -> User:
        """Gets the account of this Student.


        :return: The account of this Student.
        :rtype: User
        """
        return self._account

    @account.setter
    def account(self, account: User):
        """Sets the account of this Student.


        :param account: The account of this Student.
        :type account: User
        """

        self._account = account
